{"ast":null,"code":"import _classCallCheck from \"/home/sebasmos/Documentos/NASA_Spaceapps/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sebasmos/Documentos/NASA_Spaceapps/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sebasmos/Documentos/NASA_Spaceapps/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sebasmos/Documentos/NASA_Spaceapps/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sebasmos/Documentos/NASA_Spaceapps/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sebasmos/Documentos/NASA_Spaceapps/react-reduction/src/components/MapWithBubbles.js\";\nimport world50m from 'assets/geo-data/world-50m.json';\nimport cities from 'assets/geo-data/world-most-populous-cities.json';\nimport { scaleLinear } from 'd3-scale';\nimport React, { Component } from 'react';\nimport { ComposableMap, Geographies, Geography, Marker, Markers, ZoomableGroup } from 'react-simple-maps';\nimport { getColor } from 'utils/colors';\nvar cityScale = scaleLinear().domain([0, 37843000]).range([1, 25]);\n\nvar BubbleMap = /*#__PURE__*/function (_Component) {\n  _inherits(BubbleMap, _Component);\n\n  function BubbleMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BubbleMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BubbleMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cities: cities\n    };\n    return _this;\n  }\n\n  _createClass(BubbleMap, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // const primaryColor = getColor('primary');\n      var secondaryColor = getColor('secondary');\n      var lightColor = getColor('light');\n      return /*#__PURE__*/React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 205\n        },\n        width: 980,\n        height: 551,\n        style: {\n          width: '100%',\n          height: 'auto'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n        center: [0, 20],\n        disablePanning: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Geographies, {\n        geography: world50m,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          return geography.id !== 'ATA' && /*#__PURE__*/React.createElement(Geography, {\n            key: i,\n            geography: geography,\n            projection: projection,\n            style: {\n              default: {\n                fill: lightColor,\n                stroke: lightColor,\n                strokeWidth: 0.75,\n                outline: 'none'\n              },\n              hover: {\n                fill: secondaryColor,\n                stroke: secondaryColor,\n                strokeWidth: 0.75,\n                outline: 'none'\n              },\n              pressed: {\n                fill: secondaryColor,\n                stroke: secondaryColor,\n                strokeWidth: 0.75,\n                outline: 'none'\n              }\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 21\n            }\n          });\n        });\n      }), /*#__PURE__*/React.createElement(Markers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, this.state.cities.map(function (city, i) {\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: i,\n          marker: city,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"circle\", {\n          cx: 0,\n          cy: 0,\n          r: cityScale(city.population),\n          fill: secondaryColor,\n          stroke: secondaryColor,\n          strokeWidth: \"2\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }\n        }));\n      }))));\n    }\n  }]);\n\n  return BubbleMap;\n}(Component);\n\nexport default BubbleMap;","map":{"version":3,"sources":["/home/sebasmos/Documentos/NASA_Spaceapps/react-reduction/src/components/MapWithBubbles.js"],"names":["world50m","cities","scaleLinear","React","Component","ComposableMap","Geographies","Geography","Marker","Markers","ZoomableGroup","getColor","cityScale","domain","range","BubbleMap","state","secondaryColor","lightColor","scale","width","height","geographies","projection","map","geography","i","id","default","fill","stroke","strokeWidth","outline","hover","pressed","city","population"],"mappings":"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","sourcesContent":["import world50m from 'assets/geo-data/world-50m.json';\nimport cities from 'assets/geo-data/world-most-populous-cities.json';\nimport { scaleLinear } from 'd3-scale';\nimport React, { Component } from 'react';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Markers,\n  ZoomableGroup,\n} from 'react-simple-maps';\nimport { getColor } from 'utils/colors';\n\nconst cityScale = scaleLinear()\n  .domain([0, 37843000])\n  .range([1, 25]);\n\nclass BubbleMap extends Component {\n  state = {\n    cities,\n  };\n\n  render() {\n    // const primaryColor = getColor('primary');\n    const secondaryColor = getColor('secondary');\n    const lightColor = getColor('light');\n\n    return (\n      <ComposableMap\n        projectionConfig={{ scale: 205 }}\n        width={980}\n        height={551}\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      >\n        <ZoomableGroup center={[0, 20]} disablePanning>\n          <Geographies geography={world50m}>\n            {(geographies, projection) =>\n              geographies.map(\n                (geography, i) =>\n                  geography.id !== 'ATA' && (\n                    <Geography\n                      key={i}\n                      geography={geography}\n                      projection={projection}\n                      style={{\n                        default: {\n                          fill: lightColor,\n                          stroke: lightColor,\n                          strokeWidth: 0.75,\n                          outline: 'none',\n                        },\n                        hover: {\n                          fill: secondaryColor,\n                          stroke: secondaryColor,\n                          strokeWidth: 0.75,\n                          outline: 'none',\n                        },\n                        pressed: {\n                          fill: secondaryColor,\n                          stroke: secondaryColor,\n                          strokeWidth: 0.75,\n                          outline: 'none',\n                        },\n                      }}\n                    />\n                  ),\n              )\n            }\n          </Geographies>\n          <Markers>\n            {this.state.cities.map((city, i) => (\n              <Marker key={i} marker={city}>\n                <circle\n                  cx={0}\n                  cy={0}\n                  r={cityScale(city.population)}\n                  fill={secondaryColor}\n                  stroke={secondaryColor}\n                  strokeWidth=\"2\"\n                />\n              </Marker>\n            ))}\n          </Markers>\n        </ZoomableGroup>\n      </ComposableMap>\n    );\n  }\n}\n\nexport default BubbleMap;\n"]},"metadata":{},"sourceType":"module"}