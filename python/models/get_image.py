import os
import json
import geojson
import requests
import shapely.wkt
from requests_oauthlib import OAuth2Session
from oauthlib.oauth2 import BackendApplicationClient

cities = [
   {
      "city":"Venice",
      "shape":"POLYGON((12.174395 44.778037,12.196361 44.816998,13.804426 45.675662,13.823647 45.596962,13.626039 45.443008,13.549156 45.433376,13.626039 45.323461,13.713905 45.095238,13.78383 44.980605,13.830519 44.892158,13.8 44.5,12.234821 44.481556,12.06659 44.581469,12.174395 44.778037))"
   },
   {
      "city":"San Francisco",
      "shape":"POLYGON((-122.6543008132791 38.01598846276522,-122.33203787534381 38.338655666134855,-121.54763197266665 38.12729394047969,-121.46071961862772 37.93204937707753,-122.22405386332039 37.953662944394424,-121.8388347136459 37.47575930148646,-121.94120295061978 37.32620562372294,-122.67223239973059 37.287702236476605,-122.6543008132791 38.01598846276522))"
   }
]

token = ''
empty_image = b'MM\x00*\x00\x00\x00\x08\x00\x11\x01\x00\x00\x03\x00\x00\x00\x01\x01\x00\x00\x00\x01\x01\x00\x03\x00\x00\x00\x01\x01\x00\x00\x00\x01\x02\x00\x03\x00\x00\x00\x01\x00 \x00\x00\x01\x03\x00\x03\x00\x00\x00\x01\x80\xb2\x00\x00\x01\x06\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\x01\x11\x00\x04\x00\x00\x00 \x00\x00\x00\xdc\x01\x15\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\x01\x16\x00\x03\x00\x00\x00\x01\x00\x08\x00\x00\x01\x17\x00\x04\x00\x00\x00 \x00\x00\x01\\\x01\x1a\x00\x05\x00\x00\x00\x01\x00\x00\x01\xdc\x01\x1b\x00\x05\x00\x00\x00\x01\x00\x00\x01\xe4\x01(\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\x01S\x00\x03\x00\x00\x00\x01\x00\x03\x00\x00\x83\x0e\x00\x0c\x00\x00\x00\x03\x00\x00\x01\xec\x84\x82\x00\x0c\x00\x00\x00\x06\x00\x00\x02\x04\x87\xaf\x00\x03\x00\x00\x00\x1c\x00\x00\x024\x87\xb1\x00\x02\x00\x00\x00\x0f\x00\x00\x02l\x00\x00\x00\x00\x00\x00\x00\x00\x02{\x00\x00\x02\x9a\x00\x00\x02\xb9\x00\x00\x02\xd8\x00\x00\x02\xf7\x00\x00\x03\x16\x00\x00\x035\x00\x00\x03T\x00\x00\x03s\x00\x00\x03\x92\x00\x00\x03\xb1\x00\x00\x03\xd0\x00\x00\x03\xef\x00\x00\x04\x0e\x00\x00\x04-\x00\x00\x04L\x00\x00\x04k\x00\x00\x04\x8a\x00\x00\x04\xa9\x00\x00\x04\xc8\x00\x00\x04\xe7\x00\x00\x05\x06\x00\x00\x05%\x00\x00\x05D\x00\x00\x05c\x00\x00\x05\x82\x00\x00\x05\xa1\x00\x00\x05\xc0\x00\x00\x05\xdf\x00\x00\x05\xfe\x00\x00\x06\x1d\x00\x00\x06<\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x1f\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01?sbZh+b\x80?p\xd0\xb5$9\x9b \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0^\xab\x05\xd9]\xd4\xc7@C+Y\x14nL\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x06\x04\x00\x00\x00\x00\x01\x00\x02\x04\x01\x00\x00\x00\x01\x00\x01\x04\x02\x87\xb1\x00\x06\x00\x00\x08\x00\x00\x00\x00\x01\x10\xe6\x08\x01\x87\xb1\x00\x06\x00\x07\x08\x06\x00\x00\x00\x01#\x8eWGS 84|WGS 84|\x00x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01x^\xed\xc1\x01\r\x00\x00\x00\xc2\xa0\xf7Om\x0e7\xa0\x00\x00\x00\x00\x00\x00\x00\x80w\x03 \x00\x00\x01'

def getImage(city, datetime):
    global token
    if not token:
        with open('.env', 'r') as f:
            credentials = json.load(f)
            client_id = credentials['SH_CLIENT_ID']
            client_secret = credentials['SH_CLIENT_SECRET']
            client = BackendApplicationClient(client_id=client_id)
            oauth = OAuth2Session(client=client)
            token = oauth.fetch_token(token_url='https://services.sentinel-hub.com/oauth/token',client_id=client_id, client_secret=client_secret)
    else:
        pass

    city_names = [x['city'].lower() for x in cities]
    if city not in city_names:
        return {'error' : 'Invalid city name.'}
    else:
        for x in cities:
            if x['city'].lower():
                shape = x['shape']
            else:
                pass
        # area = shapely.wkt.loads('POLYGON((-122.6543008132791 38.01598846276522,-122.33203787534381 38.338655666134855,-121.54763197266665 38.12729394047969,-121.46071961862772 37.93204937707753,-122.22405386332039 37.953662944394424,-121.8388347136459 37.47575930148646,-121.94120295061978 37.32620562372294,-122.67223239973059 37.287702236476605,-122.6543008132791 38.01598846276522))')
        area = shapely.wkt.loads('POLYGON((12.174395 44.778037,12.196361 44.816998,12.085149 45.405263,12.426024 45.583514,13.153667 45.779148,13.603981 45.811687,13.804426 45.675662,13.823647 45.596962,13.626039 45.443008,13.549156 45.433376,13.626039 45.323461,13.713905 45.095238,13.78383 44.980605,13.830519 44.892158,13.8 44.5,12.234821 44.481556,12.06659 44.581469,12.174395 44.778037))')

        gj_feat = geojson.Feature(geometry=area, properties={})
        response = requests.post('https://shservices.mundiwebservices.com/api/v1/process',
        headers={
          "Authorization" : "Bearer %s"%(token['access_token']),
          "Accept": 'image/tiff'
      },
        json={
        "input": {
            "bounds": {
                "geometry": gj_feat.geometry,
            },
            "data": [{
                "type": "byoc-4f5f67f1-5715-4f2b-8c98-ae57948ee2f5" #JAXA_wq_tsm collection ID
            }]
        },
        "evalscript": """
        //VERSION=3
        function setup() {
          return {
            input: ["tsm"],
            output: { bands: 1,
              sampleType: "FLOAT32" }
          };
        }
        function evaluatePixel(sample) {
            return [sample.tsm];
        }
        """
    })

        if bytes(response.content) == bytes(empty_image):
            print('balck pic')
        else:
            file = open("jaxa_tsm.png", "wb")
            file.write(response.content)
            print(response.content)
            file.close()
